name: Main workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        options:
          - plan
          - apply
          - destroy
jobs:
  terraform:
    uses: ./.github/workflows/terraform.yaml
    with:
      exec: ${{ github.event.inputs.action }}
    secrets:
      TF_VAR_PUB_SSH_KEY: ${{ secrets.PUB_SSH_KEY }}
      TF_VAR_YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      TF_VAR_YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      TF_VAR_YC_ZONE: ${{ secrets.YC_ZONE }}
      ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      YC_KEY_JSON: ${{ secrets.YC_KEY_JSON }}

  #artifact:
  #  outputs:
  #    kittygram_ip: ${{ steps.set_output.outputs.kittygram_ip }}
  #  if: ${{ github.event.inputs.action == 'apply' }}
  #  runs-on: ubuntu-latest
  #  needs: terraform
  #  steps:
  #  - name: Checkout code
  #    uses: actions/checkout@v4#

  #  - name: Download IP artifact
  #    uses: actions/download-artifact@v4
  #    with:
  #      name: kittygram_ip
  #      path: ./
  #  - name: Set IP
  #    id: set_output
  #    run: |
  #      IP=$(cat ./kittygram_ip.txt)
  #      echo "kittygram_ip=$IP" >> $GITHUB_OUTPUT
#echo "needs.artifact.outputs.kittygram_ip = ${{ needs.artifact.outputs.kittygram_ip }}"


  tests:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    - name: Test with flake8
      run: python -m flake8 --ignore=F401,E501,W291,W292,E301,W293,E123,I001,I004,E265,I003   backend/


  build_backend_and_push_to_docker_hub:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push backend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          build-args: |
            POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
          tags: ${{ secrets.DOCKER_HUB_USER_NAME }}/kittygram_backend:latest

  build_frontend_and_push_to_docker_hub:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push frontend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_HUB_USER_NAME }}/kittygram_frontend:latest
  
  build_gateway_and_push_to_docker_hub:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push gateway to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_HUB_USER_NAME }}/kittygram_gateway:latest

  set_ip:
    outputs:
      kittygram_ip: ${{ steps.set_ip.outputs.ip }}
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download IP artifact
      uses: actions/download-artifact@v4
      with:
        name: kittygram_ip
        path: ./
    - name: Set IP
      id: set_ip
      run: |
        IP=$(cat ./kittygram_ip.txt)
        echo "ip=$IP" >> $GITHUB_OUTPUT

  deploy:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
      - set_ip
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Sleep for 2 minutes
      uses: jakejarvis/wait-action@master
      with:
        time: '120s'
    - shell: bash
      env:
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "POSTGRES_DB=$POSTGRES_DB" >> .env
        echo "POSTGRES_USER=$POSTGRES_USER" >> .env
        echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
        echo "DATABASE_URL=$DATABASE_URL" >> .env
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        #host: ${{ secrets.HOST }}
        host: ${{ needs.set_ip.outputs.kittygram_ip }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "docker-compose.production.yml"
        target: "./"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        #host: ${{ secrets.HOST }}
        host: ${{ needs.set_ip.outputs.kittygram_ip }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input

  auto_yandex_tests:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
      - deploy
      - set_ip
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-pep8 pytest==5.4.0 PyYAML requests
    - shell: bash
      env:
        REPOSITORY_USER_NAME: ${{ secrets.REPOSITORY_USER_NAME }}
        #DOMAIN: ${{ secrets.DOMAIN }}
        DOMAIN: ${{ needs.set_ip.outputs.kittygram_ip}}
        DOCKER_HUB_USER_NAME: ${{ secrets.DOCKER_HUB_USER_NAME }}
      run: |
        echo "repo_owner: $REPOSITORY_USER_NAME" >> tests.yml
        echo "kittygram_domain: $DOMAIN" >> tests.yml
        echo "dockerhub_username: $DOCKER_HUB_USER_NAME" >> tests.yml
    - name: Run Yandex Tests
      run: pytest tests

  telegramm-notify:
    if: ${{ github.event.inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    needs:
    - build_backend_and_push_to_docker_hub
    - build_frontend_and_push_to_docker_hub
    - build_gateway_and_push_to_docker_hub
    - deploy
    - auto_yandex_tests
    steps:
      - name: Notify via telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAMM_CHAT_ID }}
          token: ${{ secrets.TELEGRAMM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            Repository: ${{ github.repository }}

            Link: https://github.com/${{ github.repository }}/commit/${{github.sha}}